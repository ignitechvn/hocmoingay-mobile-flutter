import 'package:dio/dio.dart';
import '../config/app_config.dart';
import '../interceptors/api_logging_interceptor.dart';
import 'logger.dart';

/// Demo class ƒë·ªÉ test API logging
class ApiLoggingDemo {
  static void testApiLogging() {
    AppLogger.info('=== B·∫ÆT ƒê·∫¶U TEST API LOGGING ===');

    // T·∫°o Dio instance v·ªõi logging interceptor
    final dio = Dio(
      BaseOptions(
        baseUrl: 'https://jsonplaceholder.typicode.com',
        connectTimeout: const Duration(seconds: 10),
        receiveTimeout: const Duration(seconds: 10),
      ),
    );

    // Th√™m logging interceptor
    dio.interceptors.add(ApiLoggingInterceptor());

    // Test c√°c API calls
    _testGetRequest(dio);
    _testPostRequest(dio);
    _testErrorRequest(dio);
  }

  static Future<void> _testGetRequest(Dio dio) async {
    AppLogger.info('--- Testing GET Request ---');
    try {
      final response = await dio.get('/posts/1');
      AppLogger.info('GET Response received: ${response.statusCode}');
    } catch (e) {
      AppLogger.error('GET Request failed', e);
    }
  }

  static Future<void> _testPostRequest(Dio dio) async {
    AppLogger.info('--- Testing POST Request ---');
    try {
      final response = await dio.post(
        '/posts',
        data: {
          'title': 'Test Post',
          'body': 'This is a test post for logging demo',
          'userId': 1,
        },
      );
      AppLogger.info('POST Response received: ${response.statusCode}');
    } catch (e) {
      AppLogger.error('POST Request failed', e);
    }
  }

  static Future<void> _testErrorRequest(Dio dio) async {
    AppLogger.info('--- Testing Error Request ---');
    try {
      await dio.get('/nonexistent-endpoint');
    } catch (e) {
      AppLogger.error('Error Request failed (expected)', e);
    }
  }
}

/// H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng API Logging
class ApiLoggingGuide {
  static void showUsageGuide() {
    AppLogger.info('''
=== H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG API LOGGING ===

1. LOGGING T·ª∞ ƒê·ªòNG:
   - T·∫•t c·∫£ API calls s·∫Ω ƒë∆∞·ª£c log t·ª± ƒë·ªông th√¥ng qua ApiLoggingInterceptor
   - Logs bao g·ªìm: Request, Response, Error v√† Performance metrics

2. C√ÅC LO·∫†I LOG:
   - API Request: Method, URL, Headers, Body
   - API Response: Status code, Headers, Body
   - API Error: Error details, Stack trace
   - Performance: Th·ªùi gian th·ª±c hi·ªán API call

3. C·∫§U H√åNH LOGGING:
   - Development/Staging: Logging ƒë∆∞·ª£c b·∫≠t
   - Production: Logging b·ªã t·∫Øt (AppConfig.enableLogging = false)

4. V√ç D·ª§ LOG OUTPUT:
   ```
   üí° INFO: API Request: POST https://api.example.com/auth/login
   üìä INFO: Performance: API POST /auth/login took 245ms
   üí° INFO: API Response: POST https://api.example.com/auth/login - 200
   ```

5. C√ÅCH TEST:
   - Ch·∫°y ApiLoggingDemo.testApiLogging() ƒë·ªÉ test
   - Xem logs trong console ho·∫∑c debug console

6. T√ôY CH·ªàNH:
   - Ch·ªânh s·ª≠a AppLogger ƒë·ªÉ thay ƒë·ªïi format log
   - Th√™m filters trong ApiLoggingInterceptor ƒë·ªÉ l·ªçc logs
   - C·∫•u h√¨nh log levels trong AppConfig
''');
  }
}
